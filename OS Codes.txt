GR 1:
//FIFO Page Replacement
#include <stdio.h>
int main()
{
    int i, j, n, a[50], frame[10], no, k, avail, count = 0;

    printf("\nENTER THE NUMBER OF PAGES:\n");
    scanf("%d", &n); 

    printf("\nENTER THE PAGE NUMBER :\n");

    for (i = 1; i <= n; i++){
        scanf("%d", &a[i]); 
    }

    printf("\nENTER THE NUMBER OF FRAMES :");
    scanf("%d", &no); 

    for (i = 0; i < no; i++){ 
        frame[i] = -1;  
    }

    j = 0;

    printf("\tref string\t page frames\n");
    for (i = 1; i <= n; i++) 
    {
        printf("%d\t\t", a[i]);  
        avail = 0;
        for (k = 0; k < no; k++){ 
            if (frame[k] == a[i]){
                avail = 1;
            }
        }
        if (avail == 0)
        {
            frame[j] = a[i]; 
            j = (j + 1) % no; 
            count++; 
            for (k = 0; k < no; k++){
                printf("%d\t", frame[k]);
            }
        }

        if(avail == 1){
            for (k = 0; k < no; k++){
                printf("%d\t", frame[k]);
            }
        }
        printf("\n");
    }
    printf("Page Fault Is %d", count);
    printf("\nPage hit is: %d", n-count);
    return 0;
}




GR-2 
//display first N even no (shell script)
clear
echo "------EVEN SERIES------"
echo -n "Enter a number: "
checker=0
read num
while test $checker -le $num
do
ii=`expr $checker % 2`
        if test $ii -eq 0
        then
                echo "$checker"
        fi
checker=`expr $checker + 1`
done

GR-3
//Create a child process in Linux using the fork system call. From the child process
  obtain the process ID of both child and parent by using getpid and getppid system call

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<unistd.h>

int main(){
    pid_t pid = fork();

    if(pid == 0){
        printf("Child => PPID: %d PID: %d\n", getppid() , getpid());
        exit(EXIT_SUCCESS);
    } else if(pid>0){
        printf("Parent => PID: %d\n" , getpid());
        printf("Waiting for child process to finish.\n");
        wait(NULL);
        printf("Child Process finished. \n");
    } else
    {
        printf("Unable to create child process");
    }
    
    return EXIT_SUCCESS;
}

GR-4
//Write a program to find greatest of three numbers (shell script)
echo "Enter Num1"
read num1
echo "Enter Num2"
read num2
echo "Enter Num3"
read num3

if [ $num1 -gt $num2 ] && [ $num1 -gt $num3 ]
then
    echo $num1
elif [ $num2 -gt $num1 ] && [ $num2 -gt $num3 ]
then
    echo $num2
else
    echo $num3
fi


GR-5
//Program to arrange numbers in ascending order.
#include <stdio.h>
    void main()
    {
 
        int i, j, a, n, number[30];
        printf("Enter the value of N \n");
        scanf("%d", &n);
 
        printf("Enter the numbers \n");
        for (i = 0; i < n; ++i)
            scanf("%d", &number[i]);
 
        for (i = 0; i < n; ++i) 
        {
 
            for (j = i + 1; j < n; ++j)
            {
 
                if (number[i] > number[j]) 
                {
 
                    a =  number[i];
                    number[i] = number[j];
                    number[j] = a;
 
                }
 
            }
 
        }
 
        printf("The numbers arranged in ascending order are given below \n");
        for (i = 0; i < n; ++i)
            printf("%d\n", number[i]);
 
    }

GR-6
//Write a program to Round robin scheduling algorithm
#include <stdio.h>
#include <conio.h>

void main()
{
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10];
    float avg_wt, avg_tat;
    printf(" Total number of process in the system: ");
    scanf("%d", &NOP); 
    y = NOP; 

    for (i = 0; i < NOP; i++) 
    {
        printf("\n Enter the Arrival and Burst time of the Process[%d]\n", i + 1);
        printf(" Arrival time is: "); 
        scanf("%d", &at[i]); 
        printf(" \nBurst time is: "); 
        scanf("%d", &bt[i]);
        temp[i] = bt[i]; 
    }

    printf("Enter the Time Quantum for the process: ");
    scanf("%d", &quant); 
    printf("\n Process No \t\t Burst Time \t\t TAT \t\t Waiting Time ");
    for (sum = 0, i = 0; y != 0;) 
    {
        if (temp[i] <= quant && temp[i] > 0)  
        {
            sum = sum + temp[i];   
            temp[i] = 0; 
            count = 1; 
        }
        else if (temp[i] > 0) 
        {
            temp[i] = temp[i] - quant; 
            sum = sum + quant; 
        }
        if (temp[i] == 0 && count == 1)
        {
            y--;
            printf("\nProcess No[%d] \t\t %d\t\t\t\t %d\t\t\t %d", i + 1, bt[i], sum - at[i], sum - at[i] - bt[i]);
            wt = wt + sum - at[i] - bt[i];
            tat = tat + sum - at[i];
            count = 0;
        }
        if (i == NOP - 1) 
        {
            i = 0;
        }
        else if (at[i + 1] <= sum) 
        {
            i++;
        }
        else
        {
            i = 0;
        }
    }
    avg_wt = wt * 1.0 / NOP;
    avg_tat = tat * 1.0 / NOP;
    printf("\n Average Turn Around Time: \t%f", avg_wt);
    printf("\n Average Waiting Time: \t%f", avg_tat);
    getch();
}

GR-7
//Write a program to implement dynamic partitioning placement algorithms best fit
#include<stdio.h>
#include <string.h>

void bestFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];

    memset(allocation, -1, sizeof(allocation));

    for (int i=0; i<n; i++)
    {
        int bestIdx = -1;
        for (int j=0; j<m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                if (bestIdx == -1)
                    bestIdx = j;
                else if (blockSize[bestIdx] > blockSize[j])
                    bestIdx = j;
            }
        }

        if (bestIdx != -1)
        {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf("   %d\t\t%d\t\t" , i+1,processSize[i]);
        if (allocation[i] != -1)
            printf("%d" , allocation[i]+1);
        else
            printf("Not Allocated");
        printf("\n");
    }
}

int main()
{
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 222, 426};
    int m = sizeof(blockSize)/sizeof(blockSize[0]);
    int n = sizeof(processSize)/sizeof(processSize[0]);

    bestFit(blockSize, m, processSize, n);

    return 0 ;
}

GR-8
//Write A Program for FIFO scheduling
#include <stdio.h>

int waitingtime(int proc[], int n,
int burst_time[], int wait_time[]) {
   wait_time[0] = 0;
   
   for (int i = 1; i < n ; i++ )
   wait_time[i] = burst_time[i-1] + wait_time[i-1] ;
   return 0;
}
int turnaroundtime( int proc[], int n,
int burst_time[], int wait_time[], int tat[]) {

   int i;
   for ( i = 0; i < n ; i++)
   tat[i] = burst_time[i] + wait_time[i];
   return 0;
}
int avgtime( int proc[], int n, int burst_time[]) {
   int wait_time[n], tat[n], total_wt = 0, total_tat = 0;
   int i;

   waitingtime(proc, n, burst_time, wait_time);

   turnaroundtime(proc, n, burst_time, wait_time, tat);
  
   printf("Processes  Burst   Waiting Turn around \n");
   
   for ( i=0; i<n; i++) {
      total_wt = total_wt + wait_time[i];
      total_tat = total_tat + tat[i];
      printf(" %d\t  %d\t\t %d \t%d\n", i+1, burst_time[i], wait_time[i], tat[i]);
   }
   printf("Average waiting time = %f\n", (float)total_wt / (float)n);
   printf("Average turn around time = %f\n", (float)total_tat / (float)n);
   return 0;
}
int main() {
   
   int proc[] = { 1, 2, 3};
   int n = sizeof proc / sizeof proc[0];
   
   int burst_time[] = {5, 8, 12};
   avgtime(proc, n, burst_time);
   return 0;
}

GR-9
//Write a program to implement dynamic partitioning placement algorithms worst fit

#include<stdio.h>
#include<string.h>

void worstFit(int blockSize[], int m, int processSize[],int n)
{
    
    int allocation[n];

   
    memset(allocation, -1, sizeof(allocation));

  
    for (int i = 0; i < n; i++)
    {
       
        int wstIdx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                if (wstIdx == -1)
                    wstIdx = j;
                else if (blockSize[wstIdx] < blockSize[j])
                    wstIdx = j;
            }
        }

      
        if (wstIdx != -1)
        {     
            allocation[i] = wstIdx;
            blockSize[wstIdx] -= processSize[i];
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf("   %d\t\t%d\t\t" , i+1,processSize[i]);
        if (allocation[i] != -1)
            printf("%d" , allocation[i]+1);
        else
            printf("Not Allocated");
        printf("\n");
    }
}

int main()
{
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);

    worstFit(blockSize, m, processSize, n);

    return 0;
}


GR-10
//Write a Program for SJF scheduling.

#include<stdio.h>
 int main()
{
    int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
    float avg_wt,avg_tat;
    printf("Enter number of process:");
    scanf("%d",&n);
  
    printf("Enter Burst Time:\n");
    for(i=0;i<n;i++)
    {
        printf("p%d:",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;         
    }
  
   //sorting of burst times
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }
  
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
  
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
   
    wt[0]=0;            
  
   
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
  
        total+=wt[i];
    }
  
    avg_wt=(float)total/n;      
    total=0;
  
    printf("\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];   
        total+=tat[i];
        printf("\np%d\t\t  %d\t\t    %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }
  
    avg_tat=(float)total/n;    
    printf("\n\nAverage Waiting Time=%f",avg_wt);
    printf("\nAverage Turnaround Time=%fn",avg_tat);
}

GR-11
//Write a program to Round robin scheduling algorithm

#include <stdio.h>
#include <conio.h>

void main()
{
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10];
    float avg_wt, avg_tat;
    printf(" Total number of process in the system: ");
    scanf("%d", &NOP); 
    y = NOP; 

    for (i = 0; i < NOP; i++) 
    {
        printf("\n Enter the Arrival and Burst time of the Process[%d]\n", i + 1);
        printf(" Arrival time is: "); 
        scanf("%d", &at[i]); 
        printf(" \nBurst time is: "); 
        scanf("%d", &bt[i]);
        temp[i] = bt[i]; 
    }

    printf("Enter the Time Quantum for the process: ");
    scanf("%d", &quant); 
    printf("\n Process No \t\t Burst Time \t\t TAT \t\t Waiting Time ");
    for (sum = 0, i = 0; y != 0;) 
    {
        if (temp[i] <= quant && temp[i] > 0)  
        {
            sum = sum + temp[i];   
            temp[i] = 0; 
            count = 1; 
        }
        else if (temp[i] > 0) 
        {
            temp[i] = temp[i] - quant; 
            sum = sum + quant; 
        }
        if (temp[i] == 0 && count == 1)
        {
            y--;
            printf("\nProcess No[%d] \t\t %d\t\t\t\t %d\t\t\t %d", i + 1, bt[i], sum - at[i], sum - at[i] - bt[i]);
            wt = wt + sum - at[i] - bt[i];
            tat = tat + sum - at[i];
            count = 0;
        }
        if (i == NOP - 1) 
        {
            i = 0;
        }
        else if (at[i + 1] <= sum) 
        {
            i++;
        }
        else
        {
            i = 0;
        }
    }
    avg_wt = wt * 1.0 / NOP;
    avg_tat = tat * 1.0 / NOP;
    printf("\n Average Turn Around Time: \t%f", avg_wt);
    printf("\n Average Waiting Time: \t%f", avg_tat);
    getch();
}

GR-12
//Write a program to implement FIFO page replacement policies.

#include <stdio.h>
int main()
{
    int i, j, n, a[50], frame[10], no, k, avail, count = 0;

    printf("\nENTER THE NUMBER OF PAGES:\n");
    scanf("%d", &n); 

    printf("\nENTER THE PAGE NUMBER :\n");

    for (i = 1; i <= n; i++){
        scanf("%d", &a[i]); 
    }

    printf("\nENTER THE NUMBER OF FRAMES :");
    scanf("%d", &no); 

    for (i = 0; i < no; i++){ 
        frame[i] = -1;  
    }

    j = 0;

    printf("\tref string\t page frames\n");
    for (i = 1; i <= n; i++) 
    {
        printf("%d\t\t", a[i]);  
        avail = 0;
        for (k = 0; k < no; k++){ 
            if (frame[k] == a[i]){
                avail = 1;
            }
        }
        if (avail == 0)
        {
            frame[j] = a[i]; 
            j = (j + 1) % no; 
            count++; 
            for (k = 0; k < no; k++){
                printf("%d\t", frame[k]);
            }
        }

        if(avail == 1){
            for (k = 0; k < no; k++){
                printf("%d\t", frame[k]);
            }
        }
        printf("\n");
    }
    printf("Page Fault Is %d", count);
    printf("\nPage hit is: %d", n-count);
    return 0;
}

GR-13
//Write a program to implement LRU page replacement policies.

#include <stdio.h>
int main()
{
    int q[20], p[50], c = 0, c1, d, f, i, j, k = 0, n, r, t, b[20], c2[20];
    printf("Enter no of pages:");
    scanf("%d", &n);
    printf("Enter the reference string:"); 
    for (i = 0; i < n; i++)
        scanf("%d", &p[i]); 
    printf("Enter no of frames:");
    scanf("%d", &f); 
    q[k] = p[k]; 
    printf("\n\t%d\n", q[k]); 
    c++; 
    k++; 
    for (i = 1; i < n; i++) 
    {
        c1 = 0;  
        for (j = 0; j < f; j++)
        {
            if (p[i] != q[j]) 
                c1++;
        }
        if (c1 == f) 
        {
            c++;
            if (k < f)
            {
                q[k] = p[i];
                k++;
                for (j = 0; j < k; j++)
                    printf("\t%d", q[j]); 
                printf("\n");
            }
            else
            {
                for (r = 0; r < f; r++)
                {
                    c2[r] = 0;
                    for (j = i - 1; j < n; j--)
                    {
                        if (q[r] != p[j])
                            c2[r]++;
                        else
                            break;
                    }
                }
                for (r = 0; r < f; r++)
                    b[r] = c2[r];
                for (r = 0; r < f; r++)
                {
                    for (j = r; j < f; j++)
                    {
                        if (b[r] < b[j])
                        {
                            t = b[r];
                            b[r] = b[j];
                            b[j] = t;
                        }
                    }
                }
                for (r = 0; r < f; r++)
                {
                    if (c2[r] == b[0])
                        q[r] = p[i];
                    printf("\t%d", q[r]);
                }
                printf("\n");
            }
        }
    }
    printf("\nThe no of page faults is %d", c);
}


GR-14
//Write a program to implement OPTIMAL page replacement policies.

#include<stdio.h>
int main()
{
    int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, flag2, flag3, i, j, k, pos, max, faults = 0;
    printf("Enter number of frames: ");
    scanf("%d", &no_of_frames);
    
    printf("Enter number of pages: ");
    scanf("%d", &no_of_pages);
    
    printf("Enter page reference string: ");
    
    for(i = 0; i < no_of_pages; ++i){
        scanf("%d", &pages[i]);
    }
    
    for(i = 0; i < no_of_frames; ++i){
        frames[i] = -1;
    }
    
    for(i = 0; i < no_of_pages; ++i){
        flag1 = flag2 = 0;
        
        for(j = 0; j < no_of_frames; ++j){
            if(frames[j] == pages[i]){
                   flag1 = flag2 = 1;
                   break;
               }
        }
        
        if(flag1 == 0){
            for(j = 0; j < no_of_frames; ++j){
                if(frames[j] == -1){
                    faults++;
                    frames[j] = pages[i];
                    flag2 = 1;
                    break;
                }
            }    
        }
        
        if(flag2 == 0){
         flag3 =0;
        
            for(j = 0; j < no_of_frames; ++j){
             temp[j] = -1;
            
             for(k = i + 1; k < no_of_pages; ++k){
             if(frames[j] == pages[k]){
             temp[j] = k;
             break;
             }
             }
            }
            
            for(j = 0; j < no_of_frames; ++j){
             if(temp[j] == -1){
             pos = j;
             flag3 = 1;
             break;
             }
            }
            
            if(flag3 ==0){
             max = temp[0];
             pos = 0;
            
             for(j = 1; j < no_of_frames; ++j){
             if(temp[j] > max){
             max = temp[j];
             pos = j;
             }
             }            
            }
frames[pos] = pages[i];
faults++;
        }
        
        printf("\n");
        
        for(j = 0; j < no_of_frames; ++j){
            printf("%d\t", frames[j]);
        }
    }
    
    printf("\n\nTotal Page Faults = %d", faults);
    
    return 0;
}


GR-15
//Write a program to implement FCFS disk scheduling algorithm.

#include <stdio.h>
 
int size = 8;
 
void FCFS(int arr[], int head)
{
    int seek_count = 0;
    int distance, cur_track;
 
    for (int i = 0; i < size; i++) {
        cur_track = arr[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }
 
    printf("Total number of seek operations = %d\n",seek_count);
    printf("Seek Sequence is\n");
 
    for (int i = 0; i < size; i++) {
        printf("%d\n", arr[i]);
    }
}

int main()
{

    int arr[size] = { 176, 79, 34, 60, 92, 11, 41, 114 };
    int head = 50;
 
    FCFS(arr, head);
 
    return 0;
}